#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>

void sig_handler(int signum) {
printf("Received signal: %d\n", signum);
}

int main() {
struct sigaction sa;
sigset_t current_mask;

// Set up the signal handler
sa.sa_handler = sig_handler;
sigemptyset(&sa.sa_mask);
sa.sa_flags = 0;

// Register signal handler for SIGINT
if (sigaction(SIGINT, &sa, NULL) == -1) {
perror("sigaction");
exit(EXIT_FAILURE);
}

printf("Signal handler registered for SIGINT (Ctrl+C)\n");

// Check if SIGINT is in the signal mask and add it if not
sigemptyset(&current_mask);
if (sigprocmask(0, NULL, &current_mask) == -1) {
perror("sigprocmask");
exit(EXIT_FAILURE);
}

if (sigismember(&current_mask, SIGINT)) {
printf("SIGINT is already present in the signal mask.\n");
} else {
// Add SIGINT to the signal mask
sigaddset(&current_mask, SIGINT);
if (sigprocmask(SIG_BLOCK, &current_mask, NULL) == -1) {
perror("sigprocmask");
exit(EXIT_FAILURE);
}
printf("Added SIGINT to the signal mask.\n");
}

// Wait indefinitely
while (1) {
sleep(1);
}
return 0;
}
